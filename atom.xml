<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zivkidd.github.io</id>
    <title>Noodlesoup</title>
    <updated>2021-06-27T07:03:05.356Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zivkidd.github.io"/>
    <link rel="self" href="https://zivkidd.github.io/atom.xml"/>
    <subtitle>emm noodlesoup</subtitle>
    <logo>https://zivkidd.github.io/images/avatar.png</logo>
    <icon>https://zivkidd.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Noodlesoup</rights>
    <entry>
        <title type="html"><![CDATA[status]]></title>
        <id>https://zivkidd.github.io/post/status/</id>
        <link href="https://zivkidd.github.io/post/status/">
        </link>
        <updated>2021-06-27T07:02:16.000Z</updated>
        <content type="html"><![CDATA[<p>true</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于WPF的xaml]]></title>
        <id>https://zivkidd.github.io/post/guan-yu-wpf-de-xaml/</id>
        <link href="https://zivkidd.github.io/post/guan-yu-wpf-de-xaml/">
        </link>
        <updated>2021-03-31T13:38:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-wpf项目">1. wpf项目</h1>
<ol>
<li>App.xaml分支:程序的主体。大家知道，在 Windows系统里，一个程序就是一个进程(Process)。Windows还规定，一个GUI进程需要有一个窗体(Window)作为“主窗体”。App.xaml文件的作用就是声明了程序的进程会是谁，同时指定了程序的主窗体是谁。在这个分支里还有一个文件——App.xaml.cs，它是App.xaml的后台代码。</li>
<li>MainWindow.xaml分支:程序的主窗体。</li>
</ol>
<h1 id="2-xamlextensible-application-markup-language的最基本构成">2. xaml(extensible application markup language)的最基本构成</h1>
<pre><code class="language-xml">&lt;Window x:Class=&quot;WpfApp2.MainWindow&quot;
        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;
        xmlns:local=&quot;clr-namespace:WpfApp2&quot;
        mc:Ignorable=&quot;d&quot;
        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;
    &lt;Grid&gt;

    &lt;/Grid&gt;
&lt;/Window&gt;
</code></pre>
<p>XAML是一种由XML派生而来的语言，所以很多XML中的概念在XAML是通用的。比如,使用标签声明一个元素（每个元素对应内存中的一个对象）时，需要使用起始标签&lt;Tag&gt;和终止标签&lt;/Tag&gt;，夹在起始标签和终止标签中的XAML 代码表示是隶属于这个标签的内容。如果没有什么内容隶属于某个标签，则这个标签称为空标签，可以写为&lt;Tag/&gt;。</p>
<h1 id="3-关于xmlns">3. 关于xmlns</h1>
<p>xmlns（xml-namespace）是在定义名称空间（namespace）<br>
xmIns[:可选的映射前缀]=&quot;名称空间&quot;</p>
<pre><code class="language-xml">xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
</code></pre>
<p>这一句没有加冒号，说明没有映射前缀，那么来自于这个命名空间的标签都不用加前缀，比如grid，如果改成</p>
<pre><code class="language-xml">xmlns:n=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
</code></pre>
<p>那么整个变成</p>
<pre><code class="language-xml">&lt;n:Window x:Class=&quot;WpfApp2.MainWindow&quot;
        xmlns:n=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;
        xmlns:local=&quot;clr-namespace:WpfApp2&quot;
        mc:Ignorable=&quot;d&quot;
        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;
    &lt;n:Grid&gt;

    &lt;/n:Grid&gt;
&lt;/n:Window&gt;
</code></pre>
<p>为什么名称空间看上去像是一个主页地址呢?其实把它copy到E的地址栏里尝试跳转也不会打开网页。这里只是XAML解析器的一个硬性编码( hard-coding)，只要见到这些固定的字符串，就会把一系列必要的程序集（Assembly)和程序集中包含的.NET名称空间引用进来。</p>
<h1 id="4-xaml中引用类库">4. xaml中引用类库</h1>
<p>把类库引用到项目中是引用其中名称空间的物理基础，尤论是C#还是XAML都是这样。一旦将一个类库引用进程序，就可以引用其中的名称空间。假攻找的类库程序集名为MyLibrary.dl，其中包含Common和 Controls 两个名称空间，而且已经把这个程序集引用进WPF项目，那么在XAML中引用这两个名称空间的语法是:</p>
<pre><code class="language-xml">xmIns:映射名=&quot;clr-namespace:类库中名称空间的名字;assembly=类库文件名
xmins:common=&quot;clr-namespace:Common;assembly=MyLibrary&quot;
xmins:controls-&quot;clr-namespace:Controls;assembly=MyLibrary&quot;
</code></pre>
<p>比如：</p>
<pre><code class="language-xml">xmlns:yui=&quot;clr-namespace:YUI.WPF.YProperties;assembly=YUI.WPF&quot;
</code></pre>
<p>一旦我们将类库中的名称空间引用XAML文档，我们就可以使用这些名称空间里的类。语法格式是:<br>
<code>&lt;映射名:类名&gt;.….&lt;/映射名:类名&gt;</code><br>
例如使用Common和 Controls 中的类，代码是这样:</p>
<pre><code class="language-xml">&lt;common:MessagePanel x:Name=&quot;window1&quot;/&gt;
&lt;controls:LedButton x:Name=&quot;button1&quot;/&gt;
</code></pre>
<h1 id="5-x命名空间">5. x命名空间</h1>
<p>x名称空间里的成员（如x:Class、x:Name)是专门写给XAML编译器看、用来引导XAML编译器把XAML 代码编译成CLR代码的。</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">种类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x:Array</td>
<td style="text-align:center">标签扩展</td>
</tr>
<tr>
<td style="text-align:center">x:Class</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Classmodifier</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Code</td>
<td style="text-align:center">XAML指令元素</td>
</tr>
<tr>
<td style="text-align:center">x:FieldModifier</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Key</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Name</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Null</td>
<td style="text-align:center">标签扩展</td>
</tr>
<tr>
<td style="text-align:center">x:Shared</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Static</td>
<td style="text-align:center">标签扩展</td>
</tr>
<tr>
<td style="text-align:center">x:Subclass</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Type</td>
<td style="text-align:center">标签扩展</td>
</tr>
<tr>
<td style="text-align:center">x:TypeArguments</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:Uid</td>
<td style="text-align:center">Attribute</td>
</tr>
<tr>
<td style="text-align:center">x:XData</td>
<td style="text-align:center">XAML指令元素</td>
</tr>
</tbody>
</table>
<h2 id="51-xname">5.1  x:Name</h2>
<p>x:Name 的作用有两个:<br>
(1)告诉XAML编译器，当一个标签带有x:Name时除了为这个标签生成对应实例外还要为这个实例声明一个引用变量，变量名就是x:Name的值。<br>
(2)将XAML标签所对应对象的Name 属性（如果有）也设为x:Name的值，并把这个值注册到UI树上，以方便查找。<br>
经常会有初学者问:在XAML代码中是应该使用Name呢，还是 x:Name? Name属性定义在FrameworkElement类中，这个类是WPF 控件的基类，所以所有WPF 控件都具有Name这个属性。当一个元素具有Name属性时,你使用Name或x:Name效果是一样的。比如&lt;Button x:Name=&quot;btn&quot;&gt;和&lt;Button Name=&quot;btn&quot;&gt;，XAML编译器的动作都是声明名为btn的 Button类型变量并引用一个Button类型实例，而且此实例的Name属性值亦为 btn。此时，Name和 x:Name是可以互换的，只是不能同时出现在一个元素中。对于那些没有Name属性的元素，为了在XAML声明时也创建引用变量以便在C#代码中访问，我们就只能使用x:Name。因为x:Name的功能涵盖了Name属性的功能，所以<strong>全部使用x:Name以增强代码的统一性和可读性</strong>。</p>
<h2 id="52-xfieldmodifier">5.2  x:FieldModifier</h2>
<p>使用x:Name后，XAML标签对应的实例就具有了自己的引用变量，而且这些引用变量都是类的字段。既然是类的字段就免不了要关注一下它们的访问级别。默认情况下，这些字段的访问级别按照面向对象的封装原则被设置成了internal。在编程的时候，有时候我们需要从一个程序集访问另一个程序集中窗体的元素，这时候就需要把被访问控件的引用变量改为public级别，x:FieldModifier就是用来在XAML里改变引用变量访问级别的。<br>
如果这样声明一个窗体中的控件:</p>
<pre><code class="language-xml">&lt;StackPanel&gt;
&lt;TextBox x:Name=&quot;textBox1&quot; x:FieldModifier=&quot;public&quot; Margin=&quot;5&quot;/&gt;
&lt;TextBox x:Name=&quot;textBox2&quot; x:FieldModifier=&quot;public&quot; Margin=&quot;5&quot;/&gt;
&lt;TextBox x:Name=&quot;textBox3&quot; Margin=&quot;5&quot;&gt;
&lt;/StackPanel&gt;
</code></pre>
<p>textBox1和 textBox2的访问级别被设置为public，而textBox3的访问级别仍为默认的 internal(即程序集级别)。<br>
<strong>因为x:FieldModifer是用来改变引用变量访问级别的，所以使用x:FieldModifier的前提是这个标签同时也使用x:Name,不然何来的引用变量呢?</strong></p>
<h1 id="6-布局元素">6. 布局元素</h1>
<h2 id="61-grid网格">6.1  Grid:网格</h2>
<p>可以自定义行和列并通过行列的数量、行高和列宽来调整控件的布局。近似于HTML中的Table。<br>
<strong>Grid的特点如下:</strong><br>
可以定义任意数量的行和列，非常灵活。<br>
行的高度和列的宽度可以使用绝对数值、相对比例或自动调整的方式进行精确设定，并可设置最大和最小值。<br>
内部元素可以设置自己的所在的行和列，还可以设置自己纵向跨几行、横向跨几列。可以设置Children元素的对齐方向。<br>
<strong>基于这些特点，Grid适用的场合有:</strong><br>
UI布局的大框架设计。<br>
大量U元素需要成行或者成列对齐的情况。<br>
UI整体尺寸改变时，元素需要保持固有的高度和宽度比例。UI后期可能有较大变更或扩展。<br>
<img src="https://zivkidd.github.io/post-images/1617198236583.png" alt="" loading="lazy"><br>
<strong>对于Grid的行高和列宽，我们可以设置三类值:</strong><br>
绝对值: double数值加单位后缀（如上例)。<br>
比例值: double数值后加一个星号(“*”)。<br>
自动值:字符串 Auto。<br>
<strong>为控件指定行和列遵循以下规则:</strong><br>
行和列都是从0开始计数。<br>
指定一个控件在某行，就为这个控件的标签添加Grid.Row=&quot;行编号&quot;这样一个Attribute，若行编号为0（即控件处于首行）则可省略这个Attribute.<br>
指定一个控件在某列，就为此控件添加Grid.Column=&quot;列编号&quot;这样的Attribute，若列编号为0则Attribute可以省略不写.<br>
若控件需要跨多个行或列，请使用Grid.RowSpan=&quot;行数&quot;和Grid.ColumnSpan=&quot;列数&quot;两个Attribute.<br>
<strong>可以用GridSplitter做可拖拽的分隔栏</strong></p>
<h2 id="62-stackpanel栈式面板">6.2  StackPanel:栈式面板</h2>
<p>可将包含的元素在竖直或水平方向上排成一条直线，<strong>当移除一个元素后，后面的元素会自动向前移动以填充空缺</strong>。<br>
StackPanel可以把内部元素在纵向或横向上紧凑排列、形成栈式布局，通俗地讲就是把内部元素像垒积木一样“撂起来”。垒积木大家都玩过，当把排在前面的积木块抽掉之后排在它后面的元素会整体向前移动、补占原有元素的空间。<br>
<strong>基于这个特点，StackPanel适合的场合有:</strong><br>
同类元素需要紧凑排列（如制作菜单或者列表)。<br>
移除其中的元素后能够自动补缺的布局或者动画。</p>
<h2 id="63-canvas画布">6.3  Canvas:画布</h2>
<p>内部元素可以使用以像素为单位的绝对坐标进行定位，类似于WindowsForm编程的布局方式。<br>
Canvas译成中文就是“画布”，显然，在Canvas里布局就像在画布上画控件一样。使用Canvas布局与在Windows Form窗体上布局基本上是一样的，只是在 Windows Form开发时我们通过设置控件的Left和Top等属性来确定控件在窗体上的位置，而WPF 的控件没有Left和Top等属性，就像把控件放在Grid里时会被附加上 Grid.Column和 Grid.Row属性一样，当控件被放置在 Canvas里时就会被附加上 Canvas.X和Canvas.Y属性。<br>
Canvas很容易被从Windows Form迁移过来的程序员所滥用,实际上大多数时候我们都可以使用Grid或StackPanel等布局元素产生更简洁的布局。<br>
<strong>Canvas适用的场合包括:</strong><br>
一经设计基本上不会再有改动的小型布局（如图标)。<br>
艺术性比较强的布局。<br>
需要大量使用横纵坐标进行绝对点定位的布局。<br>
依赖于横纵坐标的动画。</p>
<h2 id="64-dockpanel泊靠式面板">6.4  DockPanel:泊靠式面板</h2>
<p>内部元素可以选择泊靠方向，类似于在 Windows Form编程中设置控件的Dock属性。</p>
<h2 id="65-wrappanel自动折行面板">6.5  WrapPanel:自动折行面板</h2>
<p>内部元素在排满一行后能够自动折行，类似于HTML 中的流式布局。<br>
<img src="https://zivkidd.github.io/post-images/1617198468345.png" alt="" loading="lazy"></p>
<h1 id="7-binding">7. Binding</h1>
<p>数据源是一个对象，一个对象身上可能有很多数据，这些数据又通过属性暴露给外界。那么，其中哪个数据是你想通过Binding送达UI元素的呢?换句话说，UI上的元素关心的是哪个属性值的变化呢?这个属性就称为Binding 的路径(<strong>Path</strong>)。但光有属性还不行——Binding是一种自动机制，当值变化后属性要有能力通知Binding，让 Binding 把变化传递给UI元素。怎样才能让一个属性具备这种通知Binding值已经变化的能力呢？方法是在属性的set 语句中激发一个PropertyChanged事件。这个事件不需要我们自己声明，我们要做的是让作为数据源的类实现System.ComponentModel名称空间中的INotifyPropertyChanged接口。当为 Binding 设置了数据源后，Binding就会自动侦听来自这个接口的PropertyChanged事件。<br>
实现了INotifyPropertyChanged接口的 Student类看起来是这样:</p>
<pre><code class="language-csharp">class Student : INotifyPropertyChanged
{
	public event PropertyChangedEventHandler PropertyChanged;
	private string name;
	public string Name
    {
		get { return name; }
        set{name=value;}
		//激发事件
		if (this.PropertyChanged != null)
		{
    		this.PropertyChanged.Invoke(this,new PropertyChangedEventArgs(&quot;Name&quot;));
		}
    }
}
</code></pre>
<p>经过这样一升级，当Name属性的值发生变化时PropertyChanged事件就会被激发，Binding接收到这个事件后发现事件的消息告诉它是名为Name的属性发生了值的改变,于是就会通知Binding目标端的UI元素显示新的值。</p>
<p>在c#代码中绑定：</p>
<pre><code class="language-csharp">//准备数据源
stu =new Student();
//准备Binding
Binding binding = new Binding();
binding.Source = stu;
binding.Path= new PropertyPath(&quot;Name&quot;);
//使用 Binding连接数据源与 Binding目标
BindingOperations.SetBinding(this.textBoxName, TextBox.TextProperty, binding);
</code></pre>
<p>在准备Binding 的部分，先是用“Binding binding = new Binding();”声明Binding类型变量并创建实例，然后使用“binding.Source = stu;”为Binding实例指定数据源，最后使用“binding.Path=new PropertyPath(&quot;Name&quot;);”语句为Binding 指定访问路径。<br>
把数据源和目标连接在一起的任务是使用“BindingOperations.SetBinding(...)”方法完成的。</p>
<p><strong>这个方法的3个参数是我们记忆的重点:</strong><br>
<strong>第一个参数</strong>用于指定 Binding的目标，本例中是this.textBoxName。<br>
与数据源的Path原理类似，<strong>第二个参数</strong>用于为 Binding 指明把数据送达目标的哪个属性。只是你会发现在这里用的不是对象的属性而是类的一个静态只读( static readonly)的DependencyProperty类型成员变量！这就是我们后面要详细讲述的与Binding 息息相关的依赖属性。其实很好理解，这类属性的值可以通过Binding 依赖在其他对象的属性值上,被其他对象的属性值所驱动。<br>
<strong>第三个参数</strong>很明了，就是指定使用哪个Binding实例将数据源与目标关联起来。<br>
<img src="https://zivkidd.github.io/post-images/1617198629569.png" alt="" loading="lazy"></p>
<p>在xaml中相互绑定（把textbox的text属性与slider的value关联）：</p>
<pre><code class="language-csharp">&lt;Window x:Class=&quot;WpfApplication1.Window1&quot;
		xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
		xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; 
        Title=&quot;Control as Source&quot;
		Height=&quot;110&quot;Width=&quot;300&quot;&gt;
	&lt;StackPanel
		&lt;TextBox x:Name=&quot;textBox1&quot; Text=&quot;{Binding Path=Value,ElementName=slider1}&quot;BorderBrush=&quot;Black&quot;
Margin=&quot;5&quot;/&gt;
		&lt;Slider x:Name=&quot;slider1&quot; Maximum=&quot;100&quot; Minimum=&quot;0&quot; Margin=&quot;5&quot;/&gt;
    &lt;/StackPanel&gt;
&lt;/Window&gt;
</code></pre>
<pre><code class="language-csharp">Text=&quot;{Binding Path=Value,ElementName=slider1}&quot;
</code></pre>
<p>因为Binding 类的构造器本身可以接收Path作为参数，也可以写作：</p>
<pre><code class="language-csharp">Text=&quot;{Binding Value,ElementName=slider1}&quot;
</code></pre>
<p>因为在C#代码中我们可以直接访问控件对象，所以一般也不会使用Binding 的 ElementName 属性，而是直接把对象赋值给Binding 的Source属性。</p>
<p>控制Binding数据流向的属性是Mode，它的类型是BindingMode枚举。<strong>BindingMode</strong>可取值为TwoWay、OneWay、OnTime、OneWayToSource和Default。这里的Default值是指Binding 的模式会根据目标的实际情况来确定，比如若是可编辑的(如TextBox.Text属性)，Default就采用双向模式;若是只读的（如TextBlock.Text）则采用单向模式。</p>
<p>空间属性Binding 的另一个属性——<strong>UpdateSourceTrigger</strong>，它的类型是UpdateSourceTrigger枚举，可取值为PropertyChanged、LostFocus、Explicit和Default。显然，对于TextBox默认值Default 的行为与LostFocus一致，我们只需要把这个属性改为PropertyChanged，则 Slider 的手柄就会随看我们在1extBOX里的制入m以变位置。</p>
<p><strong>binding到不同对象</strong></p>
<p>Binding的源是数据的来源，所以，只要一个对象包含数据并能通过属性把数据暴露出来，它就能当作 Binding 的源来使用。包含数据的对象比比皆是，但必须为Binding 的Source 指定合适的对象Binding才能正确工作，常见的办法有:</p>
<ol>
<li>
<p>把<strong>普通CLR类型单个对象</strong>指定为Source:包括.NET Framework自带类型的对象和用户自定义类型的对象。如果类型实现了INotifyPropertyChanged 接口，则可通过在属性的 set语句里激发PropertyChanged事件来通知 Binding数据已被更新。</p>
</li>
<li>
<p>把<strong>普通CLR集合类型对象</strong>指定为Source:包括数组、List&lt;T&gt;、ObservableCollection&lt;T&gt;等集合类型。实际工作中，我们经常需要把一个集合作为ItemsControl派生类的数据源来使用，一般是把控件的ItemsSource属性使用Binding 关联到一个集合对象上。</p>
<p>在使用集合类型作为列表控件的ltemsSource时一般会考虑使用ObservableCollection&lt;T&gt;代替List&lt;T&gt;，因为ObservableCollection&lt;T&gt;类实现了INotifyCollectionChanged和INotifyPropertyChanged接口，能把集合的变化立刻通知显示它的列表控件，改变会立刻显现出来。</p>
<p><strong>将listbox的数据绑定到数组：</strong></p>
<pre><code class="language-csharp">public Window1()
{
    InitializeComponent();
	//准备数据源
    List&lt;Student&gt; stuList = new List&lt;Student&gt;()
    {
    	new Student(){id=0, Name=&quot;Tim&quot;, Age=29},
        new Student(){id=1, Name=&quot;Tom&quot;, Age=28},
        new Student(){id=2, Name=&quot;Kyle&quot;, Age=27},
        new Student(){id=3, Name=&quot;Tony&quot;, Age=26},
        new Student(){id=4, Name=&quot;Vina&quot;, Age=25},
        new Student(){id=5, Name=&quot;Mike&quot;, Age=24},
    };
    //为ListBox 设置 Binding
    this.listBoxStudents.ItemsSource = stuList;
    this.listBoxStudents. DisplayMemberPath = &quot;Name&quot;;
    //为TextBox设置 Binding
    Binding binding = new Binding(&quot;SelectedItem.id&quot;){Source = this.listBoxStudents};
    this.textBoxld.SetBinding( TextBox.TextProerty, binding);
}
</code></pre>
</li>
<li>
<p>把<strong>ADO.NET 数据对象</strong>指定为Source:包括DataTable和 DataView等对象。</p>
</li>
<li>
<p>使用XmlDataProvider把 <strong>XML数据</strong>指定为Source:XML作为标准的数据存储和传输格式几乎无处不在，我们可以用它表示单个数据对象或者集合;些WPF控件是级联式的(如TreeView和 Menu)，我们可以把树状结构的XML 数据作为源指定给与之关联的Binding。</p>
</li>
<li>
<p>把依赖对象(Dependency Object)指定为Source:依赖对象不仅可以作为 Binding 的目标，同时也可以作为Binding 的源。这样就有可能形成Binding链。依赖对象中的依赖属性可以作为 Binding的 Path。</p>
</li>
<li>
<p>把容器的DataContext指定为Source (WPF Data Binding的默认行为):有时候我们会遇到这样的情况—我们明确知道将从哪个属性获取数据，但具体把哪个对象作为 Binding源还不能确定。这时候，我们只能先建立一个 Binding、只给它设置Path而不设置Source,让这个Binding自己去寻找Source。这时候，Binding 会自动把控件的DataContext当作自己的Source(它会沿着控件树一层一层向外找,直到找到带有Path指定属性的对象为止)。通过ElementName指定Source:在C#代码里可以直接把对象作为Source赋值给Binding,但XAML无法访问对象，所以只能使用对象的Name属性来找到对象。</p>
</li>
<li>
<p>通过Binding的 RelativeSource属性相对地指定Source:当控件需要关注自己的、自己容器的或者自己内部元素的某个值就需要使用这种办法。</p>
</li>
<li>
<p>把ObjectDataProvider对象指定为Source:当数据源的数据不是通过属性而是通过方法暴露给外界的时候，我们可以使用这两种对象来包装数据源再把它们指定为Source。</p>
</li>
<li>
<p>把使用<strong>LINQ检索得到的数据</strong>对象作为Binding的源。</p>
</li>
</ol>
<p><strong>binding的数据转换</strong></p>
<p>Binding还有另外一种机制称为数据转换(Data Convert)，当Source端Path所关联的数据与Target端目标属性数据类型不一致时，我们可以添加数据转换器(Data Converter)。上面提到的问题实际上是double类型与string 类型互相转换的问题，因内处理咫木比权间中，2次些1人库就自动替我们做了。但有些类型之间的转换就不是WPF能替我们做的了，例如下面这些情况:</p>
<ol>
<li>Source里的数据是Y、N和X三个值(可能是char类型、 string类型或自定义枚举类型),UI 上对应的是CheckBox控件，需要把这三个值映射为它的 IsChecked属性值（boo1?类型)。</li>
<li>当TextBox里已经输入了文字时用于登录的Button才会出现,这是string类型与Visibility枚举类型或bool类型之间的转换(Binding 的 Mode将是OneWay)。</li>
<li>Source里的数据可能是Male 或Female ( string或枚举)，UI上对应的是用于显示头像的Image控件，这时候需要把Source里的值转换成对应的头像图片URI(亦是OneWay)。</li>
</ol>
<p>当遇到这些情况时，我们只能目己动手写Converter，方法是创建一个类并让这个类实现IValueConverter接口。IValueConverter接口定义如下:</p>
<pre><code class="language-csharp">public interface IValueConverter
{
	object Convert(object value, Type targetType, object parameter, CultureInfo culture);
	object ConvertBack(object value,Type targetType, object parameter, Culturelnfo culture);
}
</code></pre>
<h1 id="8模板">8.模板</h1>
<p>在WPF中，通过引入模板（Template)微软将数据和算法的“内容”与“形式”解耦了。WPF中的Template分为两大类:</p>
<p><strong>ControlTemplate</strong>是算法内容的表现形式，一个控件怎样组织其内部结构才能让它更符合业务逻辑、让用户操作起来更舒服就是由它来控制的。它决定了控件“长成什么样子”，并让程序员有机会在控件原有的内部逻辑基础上扩展自己的逻辑。</p>
<p><strong>DataTemplate</strong>是数据内容的表现形式，一条数据显示成什么样子，是简单的文本还是直观的图形动画就由它来决定。</p>
<p>一言蔽之，Template就是“外衣”——ControlTemplate是控件的外衣DataTemplate是数据的外衣。</p>
<p><strong>实际项目中，ControlTemplate 主要有两大用武之地:</strong></p>
<p>通过更换ControlTemplate改变控件外观，使之具有更优的用户使用体验及外观。</p>
<p>借助ControlTemplate，程序员与设计师可以并行工作，程序员可以先用WPF标准控件进行编程，等设计师的工作完成后，只需把新的ControlTemplate应用到程序中就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python连接SQL Server数据库]]></title>
        <id>https://zivkidd.github.io/post/python-lian-jie-sql-server-shu-ju-ku/</id>
        <link href="https://zivkidd.github.io/post/python-lian-jie-sql-server-shu-ju-ku/">
        </link>
        <updated>2021-03-31T13:36:14.000Z</updated>
        <content type="html"><![CDATA[<p>通常有两个库推荐，pyodbc和pymssql，pymssql对中文非常不友好<br>
使用pyodbc之前在电脑搜索odbc数据源管理程序<br>
<img src="https://zivkidd.github.io/post-images/1617197811890.png" alt="" loading="lazy"><br>
点击添加新数据源<br>
这里会显示可用的数据源的驱动程序<br>
然后就可以在python里</p>
<pre><code class="language-python">import pyodbc
conn = pyodbc.connect('DRIVER={数据源的驱动程序如SQL Server Native Client 11.0};SERVER=IP;DATABASE=数据库名称;UID=用户名;PWD=密码')
cur=conn.cursor()
cur.execute('select top 1000 * from [dbo].[ZJB_TaskInfo]')
results=cur.fetchall()
</code></pre>
<p>这样就可以通过发送sql语句与数据库进行交互</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用shapefile切割遥感影像对应区域——QGIS与python gdal结合]]></title>
        <id>https://zivkidd.github.io/post/li-yong-shapefile-qie-ge-yao-gan-ying-xiang-dui-ying-qu-yu-qgis-yu-python-gdal-jie-he/</id>
        <link href="https://zivkidd.github.io/post/li-yong-shapefile-qie-ge-yao-gan-ying-xiang-dui-ying-qu-yu-qgis-yu-python-gdal-jie-he/">
        </link>
        <updated>2021-03-31T13:34:27.000Z</updated>
        <content type="html"><![CDATA[<p>主要要做的就是有一个大的tif，可能长20w个像素，宽10w个像素这种，然后给一些shp文件，按shp文件切割得到对应的图像分割训练需要的image和mask</p>
<h1 id="第一步就是mask怎么生成">第一步就是mask怎么生成</h1>
<ol>
<li>可以先在QGIS里用shp生成对应的影像，把shapefile转换成和对应影像同样分辨率、同样边界的影像（这个对于非常大的影像是很有用的，因为这时不可能在内存里生成一张那么大的影像，只能是先生成tif）<br>
<img src="https://zivkidd.github.io/post-images/1617197739362.png" alt="" loading="lazy"></li>
<li>可以直接在python里把shape画出来，适用于比较小的影像，这样可以少一些在qgis的操作</li>
</ol>
<h1 id="第二步就是在python里切割">第二步就是在python里切割</h1>
<ol>
<li>可以用pyshp读shape文件（路径不能包含中文），用gdal读遥感影像（gdal在conda中装会比较容易成功，conda install gdal）</li>
</ol>
<p>有一些python处理的脚本可以看看<a href="https://github.com/ZivKidd/GIS_TIFF_SHP_process">github地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于GNSS和RTK]]></title>
        <id>https://zivkidd.github.io/post/guan-yu-gnss-he-rtk/</id>
        <link href="https://zivkidd.github.io/post/guan-yu-gnss-he-rtk/">
        </link>
        <updated>2021-03-31T13:33:45.000Z</updated>
        <content type="html"><![CDATA[<p>RTK采用的实时定位技术，可以在流动站随时看到测量点的坐标以及精度情况；PPK定位属于后处理定位,在现场看不到点的坐标，需要事后处理才能看到结果。<br>
来自 <a href="https://www.sohu.com/a/247375413_769730">https://www.sohu.com/a/247375413_769730</a><br>
RTK可以自己架基站在已知点上，或者连接cors，千寻的cors价格在2000/年，可以全国通用，但在连cors时初始化需要比较久，在树木遮挡下有时候很差，所以用自己的基站比较好，精度基本在水平2cm，高度4cm<br>
PPK不能用cors，要两个接收机，一个做基站，一个流动站，但是需要后期解算，精度很高，能到毫米</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用libtiff.net进行BigTiff的读写]]></title>
        <id>https://zivkidd.github.io/post/li-yong-libtiffnet-jin-xing-bigtiff-de-du-xie/</id>
        <link href="https://zivkidd.github.io/post/li-yong-libtiffnet-jin-xing-bigtiff-de-du-xie/">
        </link>
        <updated>2021-03-31T13:28:55.000Z</updated>
        <content type="html"><![CDATA[<p>读入多张tif影像水平拼接成bigtiff</p>
<pre><code class="language-csharp">using (Tiff bigTiff = Tiff.Open(@&quot;D:\desktop\test\新建文件夹 (17)\5.tif&quot;, &quot;w&quot;))
{
    int originalImageWidth = 0, originalImageHeight = 0;
    using (Tiff image = Tiff.Open(singleComparisonJobConfig.IntensityImageFilePathList[0], &quot;r&quot;))
    {
        originalImageWidth = image.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();
        originalImageHeight = image.GetField(TiffTag.IMAGELENGTH)[0].ToInt();
    }

    bigTiff.SetField(
        TiffTag.IMAGEWIDTH,
        singleComparisonJobConfig.IntensityImageFilePathList.Count * originalImageWidth);
    bigTiff.SetField(TiffTag.IMAGELENGTH, originalImageHeight);
    bigTiff.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);

    bigTiff.SetField(TiffTag.BITSPERSAMPLE, 8);
    bigTiff.SetField(TiffTag.SAMPLESPERPIXEL, 1);

    // 这个参数很关键
    // The default is 2 * *32 - 1, which is effectively infinity. That is, the entire image is one strip. 
    // Use of a single strip is not recommended.Choose RowsPerStrip such that each strip is about 8K bytes, even if the data is not compressed, 
    // since it makes buffering simpler for readers.The 8K value is fairly arbitrary, but seems to work well.
    bigTiff.SetField(TiffTag.ROWSPERSTRIP, 1);
    bigTiff.SetField(TiffTag.COMPRESSION, Compression.NONE);
    bigTiff.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

    // TILEWIDTH TILELENGTH要是16的倍数
    // bigTiff.SetField(TiffTag.TILEWIDTH, 5120);
    // bigTiff.SetField(TiffTag.TILELENGTH, 10240);
    // bigTiff.SetField(TiffTag.TILEDEPTH, 10240);

    // var a = bigTiff.TileSize();
    Tiff[] originalImages = new Tiff[singleComparisonJobConfig.IntensityImageFilePathList.Count];
    for (int i = 0; i &lt; singleComparisonJobConfig.IntensityImageFilePathList.Count; i++)
    {
        originalImages[i] = Tiff.Open(singleComparisonJobConfig.IntensityImageFilePathList[i], &quot;r&quot;);
    }

    byte[] newBuff =
        new byte[originalImageWidth * singleComparisonJobConfig.IntensityImageFilePathList.Count];
    byte[] buffer = new byte[originalImageWidth];
    for (int j = 0; j &lt; originalImageHeight; j++)
    {
        Console.WriteLine(j);
        Console.WriteLine(DateTime.Now);
        for (int i = 0; i &lt; singleComparisonJobConfig.IntensityImageFilePathList.Count; i++)
        {
            originalImages[i].ReadScanline(buffer, j);
            Buffer.BlockCopy(buffer, 0, newBuff, i * originalImageWidth, originalImageWidth * sizeof(byte));
        }

        bigTiff.WriteScanline(newBuff, j);
    }
    bigTiff.WriteDirectory();
    bigTiff.Close();
}
</code></pre>
<p>strip这个参数很关键，如果文件很大，比如超过4g，不设置strip的话会导致libtiff.net报错，所以一般是一个strip为8000个byte，这样设置读的比较快<br>
1）简单的文件，1个Strip足以。<br>
2）每个Strip大小是相同的。<br>
3）出于某种目的，文件可以分成若干Strip。<br>
4）Script需要对齐处理。<br>
5）文件有两种基本分块模式 Strip，Tile<br>
Strip 高度方向分块<br>
Tile  像打豆腐一样分块</p>
<p>分块就是若干字节（若干行）写一次；<br>
并且要记录每一块，写的位置。<br>
Some manufacturers make life difficult by writing large amounts of uncompressed data as a single strip. This is contrary to the recommendations of the spec. The following makes an attempt at breaking such images into strips closer to the recommended 8k bytes. A side effect, however, is that the RowsPerStrip tag value may be changed.</p>
<p>在wpf展示bigtiff（只读一些行，直接用bitmap加载会报错，所以有缩放功能时需要自己判断读入哪些行）</p>
<pre><code class="language-csharp">using (Tiff bigTiff = Tiff.Open(@&quot;D:\desktop\test\新建文件夹 (17)\5.tif&quot;, &quot;r&quot;))
{
    int originalImageWidth = bigTiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();
    int originalImageHeight = bigTiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();

    double canvasHeight = grid.Height;
    int skip = Convert.ToInt32(originalImageHeight / canvasHeight);
    int resizedHeight = Convert.ToInt32(canvasHeight);
    int resizedWidth = Convert.ToInt32(originalImageWidth / skip);

    byte[,] bufferRect = new byte[resizedHeight, resizedWidth];
    byte[] buffer = new byte[originalImageWidth];
    for (int j = 0; j &lt; originalImageHeight; j += skip)
    {
        bigTiff.ReadScanline(buffer, j);
        for (int i = 0; i / skip &lt; resizedWidth; i += skip)
        {
            bufferRect[j / skip, i / skip] = buffer[i];
        }
    }

    byte[] bufferRectFlatten = new byte[resizedHeight * resizedWidth];
    Buffer.BlockCopy(bufferRect, 0, bufferRectFlatten, 0, resizedHeight * resizedWidth * sizeof(byte));
    BitmapSource bitmapSource = BitmapSource.Create(
        resizedWidth,
        resizedHeight,
        96.0,
        96.0,
        PixelFormats.Gray8,
        BitmapPalettes.Gray256,
        bufferRectFlatten,
        (resizedWidth * 8 + 7) / 8);

    image.Source = bitmapSource;
}
</code></pre>
]]></content>
    </entry>
</feed>